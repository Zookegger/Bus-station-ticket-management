@model Bus_Station_Ticket_Management.ViewModels.SelectSeatsViewModel

@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<link rel="stylesheet" href="~/css/Seat/SelectSeats.css" />

<div class="error">
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
</div>

<!-- Bootstrap 5 Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmationModalLabel">Confirm Booking</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to proceed with the booking?
      </div>
      <div class="modal-footer">
        <button type="button" id="modalNoBtn" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
        <button type="button" id="modalYesBtn" class="btn btn-primary">Yes</button>
      </div>
    </div>
  </div>
</div>

<form asp-action="BookSeats" method="post" id="seatForm" class="row pb-5">
    <div class="col-md-7">
        <h1>Select your seats</h1>
        <!-- Seat Map Section -->
        <fieldset class="mb-3">
            <legend class="form-label">Seat Information</legend>
            <input type="hidden" asp-for="TripId" />
            <input type="hidden" asp-for="VehicleId" />
            <!-- Hidden field to store selected seat IDs -->
            <input type="hidden" id="selectedSeatIds" name="selectedSeatIds" value="" />

            <div class="mb-3">
                <label class="form-label">Total Ticket:</label>
                <input type="number" name="numberOfTickets" id="numberOfTickets" value="1" class="form-control" 
                       min="1" max="@Model.Seats.Count(s => s.IsAvailable)" required />
            </div>

            <div class="seat-map">
                <div class="seat-grid d-flex justify-content-center">
                    @for (int floor = 1; floor <= Model.TotalFloors; floor++)
                    {
                        <div class="floor my-3">
                            <h5>Flooring @floor</h5>
                            @for (int row = 1; row <= Model.RowsPerFloor[floor - 1]; row++)
                            {
                                <div class="seat-row">
                                    @for (int col = 1; col <= Model.TotalColumns; col++)
                                    {
                                        var seat = Model.Seats.FirstOrDefault(s => s.Row == row && s.Column == col && s.Floor == floor);
                                        if (seat != null)
                                        {
                                            <div class="seat @(seat.IsAvailable ? "available" : "booked")" data-seat-id="@seat.Id">
                                                @seat.Number
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="seat empty"></div>
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="seat-legend-box">
                    <span class="seat-legend booked">Booked</span>
                    <span class="seat-legend available">Available</span>
                    <span class="seat-legend selected">Selected</span>
                </div>
            </div>
        </fieldset>
    </div>

    <!-- Trip Information Section -->
    <div class="col-md-5">
        <div class="card">
            <div class="card-body trip-information" id="TripInfo">
                <h5 class="card-title">Trip Information</h5>
                <p><strong>Starting Point:</strong> @Model.DepartureLocation</p>
                <p><strong>Ending Point:</strong> @Model.DestinationLocation</p>
                <p><strong>Departure Time:</strong> @Model.DepartureTime.ToString("HH:mm dd/MM/yyyy")</p>
                <p><strong>License Plate:</strong> @Model.LicensePlate</p>
                <p><strong>Total Seats:</strong> <span id="selectedSeatCount">0</span> ghế</p>
                <h4><strong>Seat Number:</strong> <span id="selectedSeats"></span></h4>
            </div>

            <hr>
            <div class="card-body user-information" id="CustomerInfo">
                <h5 class="card-title">User Information</h5>
                @if (@Model.User != null && User.Identity.IsAuthenticated)
                {
                    <p><strong>Full Name: </strong> @Model.User.FullName</p>
                    <p><strong>Address: </strong> @Model.User.Address</p>
                    <p><strong>Email: </strong> @Model.User.Email</p>
                    <p><strong>Phone Number: </strong> @Model.User.PhoneNumber</p>
                }
                else
                {
                    <div class="form-group mb-3">
                        <label for="guestName">Full Name</label>
                        <input type="text" id="guestName" name="guestName" class="form-control" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="guestEmail">Email</label>
                        <input type="email" id="guestEmail" name="guestEmail" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="guestPhone">Phone Number</label>
                        <input type="tel" id="guestPhone" name="guestPhone" class="form-control" required />
                    </div>
                }
            </div>

            <hr>
            <div class="card-body" asp-action="applyCoupon">
                <h5 class="card-title">Coupon</h5>
                <input type="hidden" id="tripId" name="tripId" value="@Model.TripId" />
                <div class="input-group mb-2">
                    <input type="hidden" id="couponId" name="couponId" value="">
                    <input type="text" id="couponCode" class="form-control" placeholder="Enter Coupon Code" />
                    <button type="button" class="btn btn-outline-primary" id="applyCouponBtn">Apply</button>
                </div>
                <div id="couponFeedback" class="mt-2"></div>
                <div class="total-price"><strong>Total:</strong> <span id="totalPrice">0đ</span></div>
            </div>
        </div>
        <!-- Notice: Remove onsubmit attribute from the form since confirmation is handled by the modal -->
        <button type="button" class="btn btn-primary w-100 mt-2" id="purchaseBtn" disabled>Purchase</button>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {
            // --- Bootstrap Modal Setup for Confirmation ---
            // When Purchase button is clicked, show the confirmation modal.
            $('#purchaseBtn').click(function (e) {
                e.preventDefault();
                var confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                confirmationModal.show();
            });

            // If user clicks 'Yes' on modal, submit the form.
            $('#modalYesBtn').click(function () {
                var confirmationModalEl = document.getElementById('confirmationModal');
                var confirmationModal = bootstrap.Modal.getInstance(confirmationModalEl);
                confirmationModal.hide();
                $('#seatForm').submit();
            });

            // --- Your existing seat & coupon logic ---
            const maxSeats = @Model.Seats.Count(s => s.IsAvailable);
            const purchaseBtn = document.getElementById('purchaseBtn');
            let selectedSeats = [];
            const pricePerSeat = @Model.Price;
            let discountedAmount = 0;
            let couponApplied = false;

            function updatePurchaseButtonState() {
                const numTickets = parseInt($('#numberOfTickets').val());
                purchaseBtn.disabled = selectedSeats.length !== numTickets;
            }

            function updateTotalPrice() {
                const total = selectedSeats.length * pricePerSeat;
                const finalTotal = total - discountedAmount;
                $('#totalPrice').text(finalTotal.toLocaleString('vi-VN') + 'đ');
            }

            $('.seat.available').click(function () {
                const seatId = $(this).data('seat-id');
                const seatNumber = $(this).text().trim();
                const numTickets = parseInt($('#numberOfTickets').val());

                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                    selectedSeats = selectedSeats.filter(s => s.id !== seatId);
                } else if (selectedSeats.length < numTickets) {
                    $(this).addClass('selected');
                    selectedSeats.push({ id: seatId, number: seatNumber });
                } else {
                    alert('You have selected the maximum number of seats based on the ticket quantity!');
                    return;
                }

                updatePurchaseButtonState();

                // Update dynamic information
                $('#selectedSeatIds').val(selectedSeats.map(s => s.id).join(','));
                $('#selectedSeatCount').text(selectedSeats.length);
                $('#selectedSeats').text(selectedSeats.map(s => s.number).join(', '));

                updateTotalPrice();
            });

            $('#numberOfTickets').change(function () {
                const numTickets = parseInt($(this).val());
                if (numTickets > maxSeats) {
                    alert('Ticket quantity exceeds available seats!');
                    $(this).val(maxSeats);
                }

                if (numTickets < selectedSeats.length) {
                    selectedSeats = selectedSeats.slice(0, numTickets);
                    $('.seat').removeClass('selected');
                    selectedSeats.forEach(s => $(`.seat[data-seat-id="${s.id}"]`).addClass('selected'));
                }

                $('#selectedSeatIds').val(selectedSeats.map(s => s.id).join(','));
                $('#selectedSeatCount').text(selectedSeats.length);
                $('#selectedSeats').text(selectedSeats.map(s => s.number).join(', '));

                updateTotalPrice();
                updatePurchaseButtonState();
            });

            $('#applyCouponBtn').click(function () {
                const couponCode = $('#couponCode').val();
                const tripId = $('input[name="tripId"]').val();

                if (!couponCode) {
                    $('#couponFeedback').html('<div class="text-danger">Please enter a coupon code.</div>');
                    return;
                }

                if (couponApplied) {
                    $('#couponFeedback').html('<div class="text-warning">Coupon already applied.</div>');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("ApplyCoupon", "Coupons")',
                    type: "POST",
                    data: {
                        couponCode: couponCode
                    },
                    success: function (response) {
                        if (response.success) {
                            discountedAmount = response.discountedAmount;
                            $('#couponId').val(response.couponId);
                            couponApplied = true;

                            $('#couponFeedback').html(`
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    ${response.message}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            `);

                            updateTotalPrice();

                            $('#applyCouponBtn').prop('disabled', true);
                            $('#couponCode').prop('readonly', true);
                        } else {
                            $('#couponFeedback').html(`
                                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                    ${response.message}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            `);
                        }
                    },
                    error: function () {
                        $('#couponFeedback').html(`
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                Something went wrong while applying the coupon.
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `);
                    }
                });
            });
        });
    </script>
    <style>
        .seat-map {
            display: flex;
            margin-bottom: 20px;
        }
        .seat-grid {
            flex-basis: 600px;
        }
        .seat-row {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        .seat {
            width: 50px;
            height: 50px;
            line-height: 50px;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        .seat.available {
            background-color: #b3e5fc;
            color: black;
        }
        .seat.booked {
            background-color: #bdbdbd;
            color: white;
            cursor: not-allowed;
        }
        .seat.selected {
            background-color: #ff9800;
            color: white;
        }
        .seat.empty {
            background-color: transparent;
            border: none;
        }
        .seat.aisle {
            background-color: transparent;
            border: none;
            width: 50px;
            height: 50px;
        }
        .seat-legend-box {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 20px;
            flex: 1;
        }
        .seat-legend {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 640;
            width: 100%;
            max-width: 100px;
            text-align: center;
        }
        .seat-legend.booked {
            background-color: #bdbdbd;
        }
        .seat-legend.available {
            background-color: #b3e5fc;
        }
        .seat-legend.selected {
            background-color: #ff9800;
        }
        .card {
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .card-title {
            font-size: 1.25rem;
            font-weight: bold;
        }
        .card-body p {
            margin-bottom: 0.5rem;
        }
        .total-price * {
            font-size: 25px !important;
        }
        .modal-backdrop.show {
            backdrop-filter: blur(15px);
        }
    </style>
}
