@model IEnumerable<Bus_Station_Ticket_Management.Models.Ticket>

@{
    ViewData["Title"] = "Index";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Index.css">
    <style>
        .toggle-handle {
            background-color: #ffffff;
            border-radius: 1.25rem;
            border-color: #d1d5db;
            padding: 0 18px;
        }

        .toggle.filter {
            border-radius: 1rem;
        }

        .btn-default:hover {
            background-color: #f3f4f6;
            border-color: #d1d5db;
        }
    </style>
}

<h1 class="text-success fw-bold mb-4">Tickets</h1>

<div class="card">
    <div class="card-body">
        <h5 class="card-title d-flex align-items-center">
            <span class="fw-bold text-muted">Filter</span>
            <button class="btn btn-secondary rounded-start ms-2 hvr-icon-grow" id="filterToggle" value="false" data-tippy-content="Press to Enable/Disable Filter">
                <i class="fa fa-filter hvr-icon"></i>
            </button>
        </h5>
        <div class="filter-container p-2 bg-light rounded-3 border shadow-sm mb-3 d-none" id="filterContainer">
            <div class="row g-3 justify-content-start align-items-center">
                <div class="col-4">
                    <div class="d-flex align-items-center">
                        <label for="IsPaid" class="form-label me-3 mb-0 fw-medium">Payment Status:</label>
                        <input class="checkbox" data-toggle="toggle" data-on="Paid" data-off="Unpaid"
                            data-onstyle="success" data-style="filter" data-offstyle="danger" data-size="normal"
                            type="checkbox" data-id="IsPaid" id="IsPaid" name="IsPaid" value="true" data-width="100"
                            data-height="38" />
                    </div>
                </div>

                <div class="col-4">
                    <div class="d-flex align-items-center">
                        <label for="IsCanceled" class="form-label me-3 mb-0 fw-medium">Cancellation:</label>
                        <input class="checkbox" data-toggle="toggle" data-on="Canceled" data-off="Active"
                            data-onstyle="warning" data-style="filter" data-offstyle="light" data-size="normal"
                            type="checkbox" data-id="IsCanceled" id="IsCanceled" name="IsCanceled" value="true"
                            data-width="100" data-height="38" />
                    </div>
                </div>

                <div class="col-4">
                    <div class="d-flex align-items-center">
                        <label for="IsGuest" class="form-label me-3 mb-0 fw-medium">User Type:</label>
                        <input class="checkbox" data-toggle="toggle" data-on="Guest" data-off="Member"
                            data-onstyle="info" data-style="filter" data-offstyle="primary" data-size="normal"
                            type="checkbox" data-id="IsGuest" id="IsGuest" name="IsGuest" value="true" data-width="125"
                            data-height="38" />
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<div class="table-responsive mb-3 shadow rounded">
    <table id="DataTable" class="table table-striped table-hover align-middle mb-0"
        data-details-url="/Admin/Tickets/DetailsPartial" data-table-name="Tickets" data-table-title="Ticket">
        <thead style="position: sticky; top: 0">
            <tr>
                <th>Is Guest?</th>
                <th>Customer Name</th>
                <th>Customer Email</th>
                <th style="min-width: 120px;">Customer Phone</th>
                <th style="min-width: 200px;">Trip</th>
                <th>Seat</th>
                <th>Booking Date</th>
                <th>Is Paid?</th>
                <th>Is Canceled?</th>
                <th>Cancelation Time</th>
                <th style="min-width: 56px; max-width: 56px; text-align: right;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="clickable-row" data-id="@item.Id" style="cursor: pointer;">
                    <td data-search="@(item.User == null)" data-value="@(item.User == null)">
                        @((item.User == null) ? "✔" : "❌")
                    </td>
                    <td>
                        @((item.User != null) ? Html.DisplayFor(modelItem => item.User.FullName) : Html.DisplayFor(modelItem
                                            => item.GuestName))
                    </td>
                    <td>
                        @((item.User != null) ? Html.DisplayFor(modelItem => item.User.Email) : Html.DisplayFor(modelItem =>
                                            item.GuestEmail))
                    </td>
                    <td>
                        @((item.User != null) ? Html.DisplayFor(modelItem => item.User.PhoneNumber) :
                                            Html.DisplayFor(modelItem => item.GuestPhone))
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Trip.Route.StartLocation.Name) ➞
                    @Html.DisplayFor(modelItem => item.Trip.Route.DestinationLocation.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Seat.Number)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BookingDate)
                </td>
                <td data-search="@item.IsPaid" data-value="@item.IsPaid">
                    @((item.IsPaid) ? "✔" : "❌")
                </td>
                <td data-search="@item.IsCanceled" data-value="@item.IsCanceled">
                    @((item.IsCanceled) ? "✔" : "❌")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CancelationTime)
                </td>
                <td class="action-buttons" onclick="event.stopPropagation()"
                    style="min-width: 90px; max-width: 90px; width: 90px !important;">
                    <!-- Dropdown Buttons (Hidden by default) -->
                    <div class="dropdown dropdown-buttons" data-bs-display="static" data-bs-theme="dark"
                        style="display:none;">
                        <button class="btn btn-outline-secondary dropdown-toggle px-2 py-1" type="button"
                            data-bs-toggle="dropdown" data-tippy-content="More Actions">
                            <i class="fa fa-ellipsis-v"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end shadow">
                            <li>
                                @if (!item.IsCanceled)
                                    {
                                        <a class="dropdown-item d-flex align-items-center gap-2" asp-action="Edit"
                                            asp-route-id="@item.Id">
                                            <i class="fa fa-edit text-primary"></i> Edit
                                        </a>
                                    }
                                </li>
                                <li>
                                    <a class="dropdown-item d-flex align-items-center gap-2" asp-action="Delete"
                                        asp-route-id="@item.Id">
                                        <i class="fa fa-trash text-danger"></i> Delete
                                    </a>
                                </li>
                            </ul>
                        </div>

                        <!-- Simple Buttons (Visible by default on small tables) -->
                        <div class="btn-group simple-buttons" role="group" style="display:none; min-width: 90px;">
                            <a role="button" class="btn btn-secondary rounded-start" asp-action="Edit"
                                asp-route-id="@item.Id" data-tippy-content="Edit Content">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a role="button" class="btn btn-danger rounded-end" asp-action="Delete" asp-route-id="@item.Id"
                                data-tippy-content="Delete Content">
                                <i class="fa fa-trash"></i>
                            </a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="offcanvas offcanvas-end" tabindex="-1" id="detailsOffcanvas" aria-labelledby="detailsOffcanvasLabel"
    style="width: 40%; min-width: 500px;">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title text-primary fs-1 fw-bold" id="detailsOffcanvasLabel">Ticket Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body px-0 py-0 card" id="detailsOffcanvasBody">

    </div>
</div>

@section Scripts {
    <script src="~/js/table.js"></script>
    <script src="~/js/initOSM.js"></script>
    <script>
        $(function () {
            $('#toggle-two').bootstrapToggle({
                on: 'Enabled',
                off: 'Disabled',
                id: 'toggleTest'
            });
        })

        $('.clickable-row').on('click', function () {
            var routeId = $(this).data('id');

            console.log(routeId);
            $.ajax({
                url: '/Admin/Tickets/DetailsPartial?id=' + routeId,
                method: 'GET',
                success: function (data) {
                    try {
                        $('#detailsOffcanvasBody').html(data);

                        setTimeout(async function () {
                            var startLatitude = parseFloat($('#ticketDetailsData').data('start-latitude'));
                            var startLongitude = parseFloat($('#ticketDetailsData').data('start-longitude'));
                            var endLatitude = parseFloat($('#ticketDetailsData').data('end-latitude'));
                            var endLongitude = parseFloat($('#ticketDetailsData').data('end-longitude'));
                            var startName = $('#ticketDetailsData').data('start-name');
                            var endName = $('#ticketDetailsData').data('end-name');

                            await initializeMap(startLatitude, startLongitude, startName, false);
                            const { startLocation, endLocation } = await addRouteAndTime(startLatitude, startLongitude, endLatitude, endLongitude);

                            if (startLocation && endLocation) {
                                $('#startAddress').text(startLocation.display_name);
                                console.log($('#startAddress').text);
                                $('#endAddress').text(endLocation.display_name);
                                console.log($('#endAddress').text);
                            } else {
                                console.warn(startLocation);
                                console.warn(endLocation);
                            }
                        }, 100);
                    } catch (error) {
                        console.error(error);
                    }
                }
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const filterToggle = $('#filterToggle');
            const filterContainer = $('#filterContainer');
            const dataTable = $("#DataTable").DataTable();

            // Cache DOM elements
            const filters = {
                isCanceled: $('[data-id="IsCanceled"]'),
                isGuest: $('[data-id="IsGuest"]'),
                isPaid: $('[data-id="IsPaid"]')
            };

            // Batch DOM reads
            function updateFilters() {
                const states = {
                    isCanceled: filters.isCanceled.is(':checked'),
                    isGuest: filters.isGuest.is(':checked'),
                    isPaid: filters.isPaid.is(':checked')
                };

                // Batch DOM writes
                requestAnimationFrame(() => {
                    if (states.isCanceled) dataTable.column(8).search('^True$', true, false);
                    else dataTable.column(8).search('^False$', true, false);

                    if (states.isGuest) dataTable.column(0).search('^True$', true, false);
                    else dataTable.column(0).search('^False$', true, false);

                    if (states.isPaid) dataTable.column(7).search('^True$', true, false);
                    else dataTable.column(7).search('^False$', true, false);

                    dataTable.draw();
                });
            }

            // Event handlers
            Object.values(filters).forEach(filter => {
                filter.on('change', updateFilters);
            });

            filterToggle.on('click', function() {
                toggleFilters();
                
                const isFilter = filterToggle.val();
                if (isFilter == 'false') {
                    dataTable.column(8).search('').draw();
                    dataTable.column(0).search('').draw();
                    dataTable.column(7).search('').draw();
                } else {
                    updateFilters();
                }

                requestAnimationFrame(() => {
                    filterContainer.toggleClass('d-none');
                });
            });
        });

        function toggleFilters() {
            const filterToggle = $('#filterToggle');
            const filterContainer = $('#filterContainer');
            const isFilter = filterToggle.val();
            
            console.log(isFilter);

            if (isFilter == 'false') {
                filterToggle.val('true');
                filterContainer.addClass('d-none').removeClass('d-block');
                filterToggle.addClass('btn-danger').removeClass('btn-secondary');
            } else if (isFilter == 'true') {
                filterToggle.val('false');
                filterContainer.addClass('d-block').removeClass('d-none');
                filterToggle.addClass('btn-secondary').removeClass('btn-danger');
            }
        }

        // Get the toggle button element
        const toggleBtn = $('.toggle.btn.filter');

        // Get all classes
        const allClasses = toggleBtn.attr('class');  // Returns "toggle btn filter btn-success"

        // Get specific classes
        const hasSuccessClass = toggleBtn.hasClass('btn-success');
        const hasDangerClass = toggleBtn.hasClass('btn-danger');

        // Get the toggle state
        const isChecked = $('#IsPaid').is(':checked');

        // Example of checking toggle state and classes
        $('#IsPaid').on('change', function () {
            const toggleBtn = $(this).closest('.toggle.btn.filter');
            const isChecked = $(this).is(':checked');
            console.log(toggleBtn);
            if (isChecked) {
                toggleBtn.removeClass('btn-danger').addClass('btn-success');
            } else {
                toggleBtn.removeClass('btn-success').addClass('btn-danger');
            }
        });
    </script>
}