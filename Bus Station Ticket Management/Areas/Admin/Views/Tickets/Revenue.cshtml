@model List<Bus_Station_Ticket_Management.Models.Ticket>

@{
    ViewData["Title"] = "Revenue Statistics";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Revenue.css">
    <link rel="stylesheet" href="~/css/Shared/table.css">
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4" data-aos="fade-down">
        <h2 class="text-success fw-bold mb-0">Revenue Statistics</h2>
        <div class="btn-group">
            <button class="btn btn-outline-primary" onclick="exportToExcel()">
                <i class="fa-solid fa-file-excel"></i> Export to Excel
            </button>
            <button class="btn btn-outline-primary" onclick="exportToPDF()">
                <i class="fa-solid fa-file-pdf"></i> Export to PDF
            </button>
        </div>
    </div>

    <!-- Enhanced Statistics Cards -->
    <div class="row g-4 mb-4">
        <!-- Total Revenue Card -->
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-right">
            <div class="card text-bg-primary shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Total Revenue</h6>
                            <h3 class="mb-0">@ViewBag.TotalRevenue.ToString("N0") VND</h3>
                            <small class="text-white-50">All time</small>
                        </div>
                        <i class="fa-solid fa-coins fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Average Ticket Price Card -->
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-up">
            <div class="card text-bg-dark shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Average Ticket Price</h6>
                            <h3 class="mb-0">
                                @((ViewBag.TotalRevenue / (ViewBag.TotalTickets > 0 ? ViewBag.TotalTickets : 1)).ToString("N0")) VND
                            </h3>
                            <small class="text-white-50">Per ticket</small>
                        </div>
                        <i class="fa-solid fa-chart-line fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tickets Sold Card -->
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-up">
            <div class="card text-bg-warning shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Tickets Sold</h6>
                            <h3 class="mb-0">@ViewBag.TotalTickets</h3>
                            <small class="text-white-50">Total tickets</small>
                        </div>
                        <i class="fa-solid fa-ticket fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Payment Status Card -->
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-left">
            <div class="card text-bg-info shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Payment Status</h6>
                            <h3 class="mb-0">
                                @(Model.Count(t => t.IsPaid).ToString("N0")) / @Model.Count.ToString("N0")
                            </h3>
                            <small class="text-white">Paid / Total</small>
                        </div>
                        <i class="fa-solid fa-money-bill-wave fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Additional Statistics -->
    <div class="row g-4 mb-4">
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-right">
            <div class="card text-bg-success shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-title mb-1">Revenue (This Month)</h6>
                    <h4 class="mb-0">
                        @{
                            var thisMonth = DateTime.Now.Month;
                            var thisYear = DateTime.Now.Year;
                            var monthRevenue = Model.Where(t => t.BookingDate.Month == thisMonth && t.BookingDate.Year == thisYear).Sum(t => t.TotalPrice);
                        }
                        @monthRevenue.ToString("N0") VND
                    </h4>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-up">
            <div class="card text-bg-secondary shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-title mb-1">Revenue (This Week)</h6>
                    <h4 class="mb-0">
                        @{
                            var startOfWeek = DateTime.Now.AddDays(-(int)DateTime.Now.DayOfWeek);
                            var weekRevenue = Model.Where(t => t.BookingDate >= startOfWeek).Sum(t => t.TotalPrice);
                        }
                        @weekRevenue.ToString("N0") VND
                    </h4>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-up">
            <div class="card text-bg-danger shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-title mb-1">Canceled Tickets</h6>
                    <h4 class="mb-0">
                        @(Model.Count(t => t.IsCanceled).ToString("N0"))
                    </h4>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-6 col-sm-12" data-aos="fade-left">
            <div class="card text-bg-light shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-title mb-1">Top Route (by Revenue)</h6>
                    <h5 class="mb-0">
                        @{
                            var topRoute = Model
                                .Where(t => t.Trip?.Route != null)
                                .GroupBy(t => t.Trip.Route.StartLocation.Name + " ➞ " + t.Trip.Route.DestinationLocation.Name)
                                .Select(g => new { Route = g.Key, Revenue = g.Sum(t => t.TotalPrice) })
                                .OrderByDescending(g => g.Revenue)
                                .FirstOrDefault();
                        }
                        @(topRoute != null ? $"{topRoute.Route} ({topRoute.Revenue.ToString("N0")} VND)" : "N/A")
                    </h5>
                </div>
            </div>
        </div>
    </div>

    <!-- Revenue Chart -->
    <div class="row mb-4" >
        <div class="col-md-6" data-aos="zoom-in" data-aos-anchor-placement="top-bottom" data-aos-duration="2000">
            <div class="card shadow-sm">
                <div class="card-body" style="min-height: 250px; max-height: 400px">
                    <canvas id="revenueChart" class="w-100 h-100"></canvas>
                </div>
            </div>
        </div>

        <!-- Revenue by Route Chart -->
        <div class="col-md-6" data-aos="zoom-in" data-aos-anchor-placement="top-bottom" data-aos-duration="2000">
            <div class="card shadow-sm">
                <div class="card-body" style="min-height: 250px; max-height: 400px">
                    <canvas id="routeRevenueChart" class="w-100 h-100"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="row mb-4" data-aos="fade-up" data-aos-anchor-placement="top-bottom" data-aos-once="true">
        <div class="col-md-8 w-100">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="get" class="row g-3" id="filterForm">
                        <div class="col-md-4">
                            <label for="fromDate" class="form-label">From Date</label>
                            <input type="date" id="fromDate" name="fromDate" value="@ViewBag.FromDate"
                                class="form-control" />
                        </div>
                        <div class="col-md-4">
                            <label for="toDate" class="form-label">To Date</label>
                            <input type="date" id="toDate" name="toDate" value="@ViewBag.ToDate" class="form-control" />
                        </div>
                        <div class="col-md-4 d-flex align-items-end gap-2">
                            <button type="submit" class="btn btn-primary w-100 h-100 fw-semibold">
                                <i class="fa-solid fa-filter"></i> Apply Filter
                            </button>
                            <button type="submit" id="clearFilter" class="btn btn-danger w-100 h-100 fw-semibold">
                                <i class="fa-solid fa-ban"></i> Clear Filter
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @if (Model.Any())
    {
        <!-- Tickets Table -->
        <div class="table-responsive mb-3 shadow rounded" data-aos="fade-up" data-aos-anchor-placement="top-bottom" data-aos-once="true">
            <table id="DataTable" class="table table-striped table-hover table-bordered-no-header"
                    data-details-url="/Admin/Tickets/DetailsPartial"
                    data-table-name="Revenue" data-table-title="Ticket">
                <thead style="position: sticky; top: 0">
                    <tr>
                        <th scope="col" class="ps-1" style="min-width: 250px;">Ticket ID</th>
                        <th scope="col" class="ps-1" style="min-width: 200px;">Trip</th>
                        <th scope="col" class="ps-1" style="min-width: 160px;">Vehicle</th>
                        <th scope="col" class="ps-1" style="min-width: 200px;">Customer</th>
                        <th scope="col" class="ps-1" style="min-width: 100px;">Seat</th>
                        <th scope="col" class="ps-1" style="min-width: 150px;">Price</th>
                        <th scope="col" class="ps-1" style="min-width: 180px;">Booking Date</th>
                        <th scope="col" class="ps-1" style="min-width: 50px;">Status</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @foreach (var ticket in Model)
                    {
                        <tr>
                            <td>@ticket.Id</td>
                            <td class="text-wrap">
                                @ticket.Trip?.Route?.StartLocation?.Name ➞ @ticket.Trip?.Route?.DestinationLocation?.Name
                            </td>
                            <td>@ticket.Trip?.Vehicle?.Name</td>
                            <td>@(string.IsNullOrEmpty(ticket.User?.FullName) ? ticket.GuestName : ticket.User.FullName)</td>
                            <td>@ticket.Seat?.Number</td>
                            <td>@ticket.TotalPrice.ToString("N0") VND</td>
                            <td>@ticket.BookingDate.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>
                                @if (ticket.IsCanceled)
                                {
                                    <span class="badge bg-danger">Canceled</span>
                                }
                                else if (ticket.IsPaid)
                                {
                                    <span class="badge bg-success">Paid</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning">Pending</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center" role="alert">
            <h4 class="alert-heading">No Tickets Found</h4>
            <p>There are no tickets available for the selected date range. Please adjust your filter criteria and try again.
            </p>
            <hr>
            <a asp-route-data="" class="btn btn-primary" onclick="window.location.reload();">
                Reset Filters
            </a>
        </div>
    }
</div>

@section Scripts {
    <script src="~/js/table.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            AOS.init({ duration: 1200 });

            document.getElementById('clearFilter').addEventListener('click', function (e) {
                e.preventDefault();
                document.getElementById('fromDate').value = '';
                document.getElementById('toDate').value = '';
                document.getElementById('filterForm').submit();
            });
        });

        // Revenue Chart
        const ctx = document.getElementById('revenueChart').getContext('2d');
        const revenueData = @Html.Raw(Json.Serialize(Model.GroupBy(t => t.BookingDate.Date)
                                                .Select(g => new { Date = g.Key.ToString("dd/MM/yyyy"), Revenue = g.Sum(t => t.TotalPrice) })));

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: revenueData.map(d => d.date),
                datasets: [{
                    label: 'Daily Revenue',
                    data: revenueData.map(d => d.revenue),
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: {
                    duration: 0 // Disable animations for better performance
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Daily Revenue Trend'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            display: false // Hide grid lines for better performance
                        },
                        ticks: {
                            callback: function (value) {
                                return value.toLocaleString() + ' VND';
                            }
                        }
                    },
                    x: {
                        grid: {
                            display: false // Hide grid lines for better performance
                        }
                    }
                }
            }
        });

        // Revenue by Route Chart
        const routeCtx = document.getElementById('routeRevenueChart').getContext('2d');
        const routeRevenueData = @Html.Raw(Json.Serialize(
            Model.Where(t => t.Trip != null && t.Trip.Route != null)
                .GroupBy(t => t.Trip.Route.StartLocation.Name + " ➞ " + t.Trip.Route.DestinationLocation.Name)
                .Select(g => new { Route = g.Key, Revenue = g.Sum(t => t.TotalPrice) })
                .OrderByDescending(g => g.Revenue)
                .Take(10)
        ));

        new Chart(routeCtx, {
            type: 'bar',
            data: {
                labels: routeRevenueData.map(d => d.route),
                datasets: [{
                    label: 'Revenue by Route',
                    data: routeRevenueData.map(d => d.revenue),
                    backgroundColor: 'rgba(54, 162, 235, 0.7)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Top 10 Routes by Revenue'
                    }
                },
                indexAxis: 'y',
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return value.toLocaleString() + ' VND';
                            }
                        }
                    }
                }
            }
        });

        // Export to PDF
        function exportToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Add title
            doc.setFontSize(16);
            doc.text("Revenue Report", 14, 16);
            
            // Add date range if available
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            if (fromDate || toDate) {
                doc.setFontSize(12);
                doc.text(`Date Range: ${fromDate || 'All'} to ${toDate || 'All'}`, 14, 24);
            }

            // Configure table
            doc.autoTable({
                html: '#DataTable',
                startY: 30,
                theme: 'grid',
                headStyles: { fillColor: [41, 128, 185], textColor: 255 },
                columnStyles: {
                    0: { cellWidth: 40 },  // Ticket ID
                    1: { cellWidth: 60 },  // Trip
                    2: { cellWidth: 40 },  // Vehicle
                    3: { cellWidth: 40 },  // Customer
                    4: { cellWidth: 30 },  // Seat
                    5: { cellWidth: 35 },  // Price
                    6: { cellWidth: 40 },  // Booking Date
                    7: { cellWidth: 30 }   // Status
                },
                styles: {
                    fontSize: 8,
                    cellPadding: 2,
                    overflow: 'linebreak'
                },
                didDrawPage: function(data) {
                    // Add footer
                    doc.setFontSize(8);
                    doc.text(
                        'Generated on: ' + new Date().toLocaleString(),
                        data.settings.margin.left,
                        doc.internal.pageSize.height - 10
                    );
                }
            });

            // Save the PDF
            doc.save('Revenue_Report.pdf');
        }

        // Export to Excel with improved formatting
        function exportToExcel() {
            const table = document.getElementById('DataTable');
            
            // First, add the header information at the top
            const wb = XLSX.utils.book_new();  // Create a new workbook
            const ws = XLSX.utils.aoa_to_sheet([  // Create a new worksheet
                ["Revenue Report"],
                [`Date Range: ${fromDate.value || 'All'} to ${toDate.value || 'All'}`],
            ]);

            // Convert the table to a worksheet starting at row 4 (after our headers)
            const tableWs = XLSX.utils.table_to_sheet(table, { 
                origin: "A1",  // Start the table data at row 4
                raw: true 
            });

            // Merge the header and table data
            XLSX.utils.sheet_add_aoa(ws, XLSX.utils.sheet_to_json(tableWs, { header: 1 }), { origin: "A4" });

            // Add the worksheet to the workbook
            XLSX.utils.book_append_sheet(wb, ws, "Revenue Report");

            // Save the file
            XLSX.writeFile(wb, 'Revenue_Report.xlsx');
        }

    </script>
}