@model Bus_Station_Ticket_Management.ViewModels.TripListViewModel;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Home";
    var now = DateTime.Now;

    var destination = ViewBag.Destination;
    var departure = ViewBag.Departure;
    var time = ViewBag.DepartureTime != null ? (ViewBag.DepartureTime).ToString("yyyy-MM-dd") : null;
}

@section Styles {
    <link rel="stylesheet" href="~/css/Home.css">
}

<div data-aos="fade-up">
    <div class="background-img">
        <div class="container pt-5">
            @if (!Model.IsSearchResult)
            {
                <div class="text-center">
                    <h1 class="display-3 fw-bold text-primary" style="text-shadow: 0 2px 2px rgb(78, 78, 78);">Book Your Bus
                        Ticket Online</h1>
                    <p class="lead text-muted fw-bold" style="text-shadow: 0 10px 10px rgba(119, 118, 118, 0.4);">Fast,
                        easy, and secure travel reservations</p>
                </div>
            }

            <!-- Hidden Popover Content Template -->
            <div id="locationPopoverContent" class="d-none px-0 py-0">
                <div class="form-floating mb-2">
                    <input type="text" class="form-control" id="location-search" placeholder="e.g. Hanoi, Saigon">
                    <label for="location-search" class="form-label">Search Location</label>
                </div>

                <ul class="list-group" id="location-suggestions" style="overflow-y: auto;"></ul>
            </div>

            <!-- Search Form -->
            <form asp-action="SearchTrips" method="post" class="row w-100 justify-content-center g-3 mb-md-5">
                <div class="col-8 col-md-4 mb-md-2 mb-0 position-relative">
                    <div class="input-group">
                        <button type="button" class="btn btn-secondary d-flex align-items-center py-0 ps-0 pe-3 w-100"
                            id="popoverDepartureBtn" data-bs-toggle="popover" data-popper-placement="bottom"
                            data-bs-html="true" data-bs-content="" data-bs-custom-class="custom-popover">
                            <input type="text" id="input_departure" name="departure" class="form-control fs-5" readonly
                                placeholder="From" required
                                style="cursor: pointer; border-top-right-radius: 0; border-bottom-right-radius: 0;" />
                            <i class="fas fa-map-marker-alt fa-lg ps-3"></i>
                        </button>
                    </div>
                </div>
                <div class="col-8 col-md-4 mb-2 mb-md-0">
                    <div class="input-group">
                        <button type="button" class="btn btn-secondary d-flex align-items-center py-0 ps-0 pe-3 w-100"
                            id="popoverDestinationBtn" data-bs-toggle="popover" data-popper-placement="bottom"
                            data-bs-html="true" data-bs-content="" data-bs-custom-class="custom-popover">
                            <input type="text" id="input_destination" name="destination" class="form-control fs-5"
                                readonly placeholder="To" required
                                style="cursor: pointer; border-top-right-radius: 0; border-bottom-right-radius: 0;" />
                            <i class="fas fa-map-marker-alt fa-lg ps-3"></i>
                        </button>
                    </div>
                </div>
                <div class="col-8 col-md-4 mb-2 mb-md-0">
                    <input type="date" id="input_time" name="departureTime" class="form-control form-control-lg fs-5"
                        placeholder="dd/MM/yyyy" required />
                </div>
                <div class="col-8 col-md-12 mb-2 mb-md-0">
                    <button type="submit" class="btn btn-lg btn-primary w-100">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
            </form>
            @if (!Model.IsSearchResult)
            {
                <div class="pb-5"></div>
            }
        </div>
    </div>
    <hr class="mb-5">

    <partial name="_DisplayTrips" model="Model" />

    @if (Model.Coupons != null && Model.Coupons.Any())
    {
        <partial name="_DisplayCoupon" model="Model" />
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        AOS.init({ duration: 1200 });

        document.addEventListener('DOMContentLoaded', function () {
            const triggerDepart = document.getElementById('popoverDepartureBtn');
            const triggerDest = document.getElementById('popoverDestinationBtn');
            const template = document.getElementById('locationPopoverContent');

            let isDepartVisible = false;
            let isDestVisible = false;

            const departPopover = new bootstrap.Popover(triggerDepart, {
                html: true,
                trigger: 'manual',
                placement: 'bottom',
                container: 'main',
                sanitize: false,
                title: `
                            <strong style="flex: 1; font-size: 1.5em">Choose departure point</strong>
                            <button class="btn btn-outline-secondary btn-sm" id="close-depart-btn">
                                <i class="fa-solid fa-x"></i>
                            </button>
                        `,
                content: () => template.innerHTML
            });

            const destPopover = new bootstrap.Popover(triggerDest, {
                html: true,
                trigger: 'manual',
                placement: 'bottom',
                container: 'main',
                sanitize: false,
                title: `
                            <strong style="flex: 1; font-size: 1.5em">Choose destination point</strong>
                            <button class="btn btn-outline-secondary btn-sm" id="close-dest-btn">
                                <i class="fa-solid fa-x"></i>
                            </button>
                        `,
                content: () => template.innerHTML
            });

            function lockScroll() {
                document.body.style.overflowY = 'hidden';
                document.documentElement.style.overflowY = 'hidden';
            }

            function unlockScroll() {
                document.body.style.overflowY = 'auto';
                document.documentElement.style.overflowY = 'auto';
            }

            triggerDepart.addEventListener('click', (e) => {
                e.stopPropagation();

                if (isDepartVisible) {
                    departPopover.hide();
                    unlockScroll();
                } else {
                    if (isDestVisible) {
                        destPopover.hide();
                        isDestVisible = false;
                    }
                    departPopover.show();
                    lockScroll();
                }

                isDepartVisible = !isDepartVisible;
                isDestVisible = false;
            });

            triggerDest.addEventListener('click', (e) => {
                e.stopPropagation();

                if (isDestVisible) {
                    destPopover.hide();
                    unlockScroll();
                } else {
                    if (isDepartVisible) {
                        departPopover.hide();
                        isDepartVisible = false;
                    }
                    destPopover.show();
                    lockScroll();
                }

                isDestVisible = !isDestVisible;
                isDepartVisible = false;
            });

            document.addEventListener('click', function (e) {
                const popoverEl = document.querySelector('.popover');
                if (isDepartVisible && !triggerDepart.contains(e.target) && !popoverEl?.contains(e.target)) {
                    departPopover.hide();
                    isDepartVisible = false;
                    unlockScroll();
                }
                if (isDestVisible && !triggerDest.contains(e.target) && !popoverEl?.contains(e.target)) {
                    destPopover.hide();
                    isDestVisible = false;
                    unlockScroll();
                }
            });

            triggerDepart.addEventListener('shown.bs.popover', () => {
                setupSearch('departure', departPopover, () => {
                    isDepartVisible = false;
                    unlockScroll();
                });

                const closeBtn = document.querySelector('#close-depart-btn');
                if (closeBtn) {
                    closeBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        departPopover.hide();
                        isDepartVisible = false;
                        unlockScroll();
                    });
                }
            });

            triggerDest.addEventListener('shown.bs.popover', () => {
                setupSearch('destination', destPopover, () => {
                    isDestVisible = false;
                    unlockScroll();
                });

                const closeBtn = document.querySelector('#close-dest-btn');
                if (closeBtn) {
                    closeBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        destPopover.hide();
                        isDestVisible = false;
                        unlockScroll();
                    });
                }
            });

            function setupSearch(type, popoverRef, hideCallback) {
                const popoverEl = document.querySelector('.popover');
                const input = popoverEl?.querySelector('#location-search');
                const suggestionsBox = popoverEl?.querySelector('#location-suggestions');
                const closeBtn = popoverEl?.querySelector(type === 'departure' ? '#close-depart-btn' : '#close-dest-btn');

                if (closeBtn) closeBtn.style.display = "none";

                let activeIndex = -1;

                if (!input || !suggestionsBox) return;

                input.focus();
                fetchSuggestions('', type, suggestionsBox, popoverRef, hideCallback);

                input.oninput = () => {
                    fetchSuggestions(input.value.trim(), type, suggestionsBox, popoverRef, hideCallback);
                };

                input.onkeydown = (e) => {
                    const items = suggestionsBox.querySelectorAll('li');
                    if (!items.length) return;

                    if (e.key === 'ArrowDown') {
                        e.preventDefault();
                        if (activeIndex < items.length - 1) activeIndex++;
                        updateActive(items);
                    } else if (e.key === 'ArrowUp') {
                        e.preventDefault();
                        if (activeIndex > 0) activeIndex--;
                        updateActive(items);
                    } else if (e.key === 'Enter') {
                        e.preventDefault();
                        if (activeIndex >= 0) items[activeIndex].click();
                    }
                };

                function updateActive(items) {
                    items.forEach((item, i) => {
                        item.classList.toggle('active', i === activeIndex);
                    });
                }
            }

            async function fetchSuggestions(term, type, box, popoverRef, hideCallback) {
                try {
                    const res = await fetch(`/Location/Search?term=${encodeURIComponent(term)}`);
                    if (!res.ok) throw new Error('Fetch failed');

                    const data = await res.json();
                    const locations = data.locationList;
                    box.innerHTML = '';

                    if (!locations.length) {
                        box.innerHTML = '<li class="list-group-item text-muted">No results found</li>';
                        return;
                    }

                    locations.forEach(loc => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item list-group-item-action';
                        li.style.cursor = 'pointer';
                        li.innerHTML = `
                                    <div><strong class="fs-5">${loc.name}</strong></div>
                                    <small class="text-muted fs-6">${loc.address}</small>
                                `;

                        li.onclick = () => {
                            const inputField = document.querySelector(`input[name="${type}"]`);
                            if (inputField) inputField.value = loc.name;
                            popoverRef.hide();
                            hideCallback();
                        };

                        box.appendChild(li);
                    });

                } catch (err) {
                    console.error(err);
                    box.innerHTML = '<li class="list-group-item text-danger">Error loading results</li>';
                }
            }

            // Restore inputs from ViewBag
            const input_departure = document.getElementById('input_departure');
            const input_destination = document.getElementById('input_destination');
            const input_time = document.getElementById('input_time');

            try {
                if (input_departure) input_departure.value = `@departure`;
                if (input_destination) input_destination.value = `@destination`;
                if (input_time) input_time.value = `@time`;
            } catch (error) {
                console.error(error);
            }
        });
    </script>

    <style>
        #location-suggestions {
            flex: 1;
        }

        #location-suggestions li.active {
            background-color: #0d6efd;
            color: white;
        }

        .popover {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        .popover-header {
            display: flex;
            align-items: center;
        }

        .popover-body {
            width: 100%;
            max-height: 100%;
        }

        main.py-4 {
            padding-top: 0px !important;
        }
    </style>
}
