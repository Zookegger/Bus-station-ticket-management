@model Bus_Station_Ticket_Management.ViewModels.TripListViewModel;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Home";
    var now = DateTime.Now;
}

<div class="container pb-4">

    @if (!Model.IsSearchResult)
    {
        <div class="text-center">
            <h1 class="display-3 fw-bold text-primary">Book Your Bus Ticket Online</h1>
            <p class="lead text-muted">Fast, easy, and secure travel reservations</p>
        </div>
    }

    <!-- Hidden Popover Content Template -->
    <div id="departurePopoverContent" class="d-none px-0 py-0">
        <div class="form-floating mb-3">
            <input type="text" class="form-control mb-2" id="location-search" placeholder="e.g. Hanoi, Saigon">
            <label for="location-search" class="form-label">Search Location</label>
        </div>
        
        <ul class="list-group" id="location-suggestions" style="max-height: 150px; overflow-y: auto;"></ul>
        <button class="btn btn-primary btn-sm w-100 mt-3">Select</button>
    </div>

    <!-- Search Form -->
    <form asp-action="SearchTrips" method="post" class="row w-100 justify-content-center g-3 mb-5">
        <div class="col-8 col-md-4 mb-2 mb-md-0 position-relative">
            <div class="input-group input-group-lg">
                <input type="text" name="departure" class="form-control" placeholder="From" required />
                <button type="button" class="btn btn-outline-secondary" id="popoverDepartureBtn"
                    data-bs-toggle="popover" data-popper-placement="bottom" data-bs-html="true" data-bs-content=""
                    data-bs-custom-class="custom-popover">
                    <i class="fas fa-map-marker-alt mr-2"></i>
                </button>
            </div>
        </div>
        <div class="col-8 col-md-4 mb-2 mb-md-0">
            <input type="text" name="destination" class="form-control form-control-lg" placeholder="To" required />
        </div>
        <div class="col-8 col-md-4 mb-2 mb-md-0">
            <input type="date" name="departureTime" class="form-control form-control-lg" placeholder="dd/MM/yyyy"
                required />
        </div>
        <div class="col-8 col-md-12 mb-2 mb-md-0">
            <button type="submit" class="btn btn-lg btn-primary w-100">
                <i class="fas fa-search"></i> Search
            </button>
        </div>
    </form>

    <hr class="mb-5">

    <partial name="_DisplayTrips" model="Model" />
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const trigger = document.getElementById('popoverDepartureBtn');
            const template = document.getElementById('departurePopoverContent');

            let popover = new bootstrap.Popover(trigger, {
                html: true,
                trigger: 'manual',
                placement: 'bottom',
                container: 'main',
                sanitize: false,
                title: `
                            <strong style="flex: 1; font-size: 1.5em">Choose departure point</strong>
                            <button class="btn btn-outline-secondary btn-sm" id="close-popover-btn" style="display: none"><i class="fa-solid fa-x"></i></button>
                        `,
                content: function () {
                    return template.innerHTML;
                },
                popperConfig: function (defaultBsPopperConfig) {
                    // Lock placement to bottom
                    defaultBsPopperConfig.modifiers = defaultBsPopperConfig.modifiers || [];
                    defaultBsPopperConfig.modifiers.push({
                        name: 'flip',
                        options: {
                            fallbackPlacements: []
                        }
                    });

                    defaultBsPopperConfig.modifiers.push({
                        name: 'preventOverflow',
                        options: {
                            boundary: 'window' // Allow it to overflow container
                        }
                    });

                    return defaultBsPopperConfig;
                }
            });

            let popoverVisible = false;

            trigger.addEventListener('click', function (e) {
                e.stopPropagation();

                if (popoverVisible) {
                    popover.hide();
                } else {
                    popover.show();
                }

                popoverVisible = !popoverVisible;
            });

            document.addEventListener('click', function (e) {
                const popoverEl = document.querySelector('.popover');
                if (popoverVisible && popoverEl && !trigger.contains(e.target) && !popoverEl.contains(e.target)) {
                    popover.hide();
                    popoverVisible = false;
                }
            });

            trigger.addEventListener('shown.bs.popover', () => {
                const popoverEl = document.querySelector('.popover');
                const closeBtn = popoverEl?.querySelector("#close-popover-btn");

                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        popover.hide();
                        popoverVisible = false;
                    });
                }

                const input = popoverEl?.querySelector('#location-search');
                const suggestionsBox = popoverEl?.querySelector('#location-suggestions');
                let activeIndex = -1;     

                if (!input || !suggestionsBox) return;

                input.focus();
                fetchLocationData('');

                input.oninput = async function () {
                    const term = input.value.trim();
                    fetchLocationData(term);
                };

                input.onkeydown = function (e) {
                    const items = suggestionsBox.querySelectorAll('li');
                    if (!items.length) return;

                    if (e.key === 'ArrowDown') {
                        e.preventDefault();
                        if (activeIndex < items.length - 1) activeIndex++;
                        updateActive(items);
                    } else if (e.key === 'ArrowUp') {
                        e.preventDefault();
                        if (activeIndex > 0) activeIndex--;
                        updateActive(items);
                    } else if (e.key === 'Enter') {
                        e.preventDefault();
                        if (activeIndex >= 0) items[activeIndex].click();
                    }
                };

                function updateActive(items) {
                    items.forEach((item, i) => {
                        item.classList.toggle('active', i === activeIndex);
                    });
                }
            });

            async function fetchLocationData(term) {
                try {
                    const res = await fetch(`/Location/Search?term=${encodeURIComponent(term)}`);
                    if (!res.ok) throw new Error('Failed to fetch locations');

                    const data = await res.json();
                    let locations = data.locationList;

                    const popoverEl = document.querySelector('.popover');
                    const suggestionsBox = popoverEl?.querySelector('#location-suggestions');
                    if (!suggestionsBox) return;

                    suggestionsBox.innerHTML = '';
                    activeIndex = -1;

                    if (locations.length === 0) {
                        suggestionsBox.innerHTML = '<li class="list-group-item text-muted">No results found</li>';
                        return;
                    }

                    locations.forEach((loc, index) => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <div><strong>${loc.name}</strong></div>
                            <small class="text-muted">${loc.address}</small>
                        `;
                        li.className = 'list-group-item list-group-item-action';
                        li.style = "cursor: pointer;"
                        li.setAttribute('data-index', index);

                        li.onclick = () => {
                            const departureInput = document.querySelector('input[name="departure"]');
                            if (departureInput) {
                                departureInput.value = loc.name;
                                popover.hide();
                                popoverVisible = false;
                            }
                        };

                        suggestionsBox.appendChild(li);
                    });

                } catch (error) {
                    console.error(error);
                    const popoverEl = document.querySelector('.popover');
                    const suggestionsBox = popoverEl?.querySelector('#location-suggestions');
                    if (suggestionsBox)
                        suggestionsBox.innerHTML = '<li class="list-group-item text-danger">Error fetching locations</li>';
                }
            }
        });
    </script>
    <style>
        #location-suggestions {
            flex: 1;
        }

        #location-suggestions li.active {
            background-color: #0d6efd;
            color: white;
        }

        .popover {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        .popover-header {
            display: flex;
            align-items: center;
        }

        .popover-body {
            width: 100%;
            max-height: 100%;
        }
    </style>
    <link rel="stylesheet" href="~/css/Home.css">
}
