@model Bus_Station_Ticket_Management.ViewModels.SelectSeatsViewModel

@{
	ViewData["Title"] = "Select Seat";
	Layout = "~/Views/Shared/_Layout.cshtml";

	// Precompute seat lookup dictionary for O(1) access
	var seatLookup = Model.Seats.ToDictionary(s => new { s.Floor, s.Row, s.Column });
}

<link rel="stylesheet" href="~/css/Seat/SelectSeats.css" />

<div class="notification-area">
	@if (TempData["Error"] != null)
	{
		<div class="alert alert-danger">@TempData.Peek("Error")</div>
	}
	@if (TempData["Success"] != null)
	{
		<div class="alert alert-success">
			@TempData.Peek("Success")
			@if (TempData["RedirectAfterDelay"] != null && (bool)TempData["RedirectAfterDelay"])
			{
				<div class="mt-2">Redirecting in <span id="countdown">5</span> seconds...</div>
			}
		</div>
	}
</div>

<!-- Bootstrap 5 Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Booking</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to book <span id="modal-seat-count">0</span> seat(s)?</p>
				<p><strong>Seats:</strong> <span id="modal-seat-numbers"></span></p>
				<p><strong>Total:</strong> <span id="modal-total-price">0đ</span></p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" id="confirm-booking-btn" class="btn btn-primary">Confirm Booking</button>
			</div>
		</div>
	</div>
</div>

<form asp-action="BookSeats" method="post" id="seatForm" class="row pb-5">
	<div class="col-lg-7 ">
		<div class="card h-100 ">
			<h1 class="card-header">Select your seats</h1>
			<!-- Seat Map Section -->
			<div class="card-body mb-3 flex-1 h-100 w-100">
				<h1 class="card-title">Seat Information</h1>
				<input type="hidden" asp-for="TripId" />
				<input type="hidden" asp-for="VehicleId" />
				<input type="hidden" id="selectedSeatIds" name="selectedSeatIds" value="" />

				<div class="mb-3">
					<label class="form-label">Total Ticket:</label>
					<input type="number" name="numberOfTickets" id="numberOfTickets" value="1" class="form-control"
						min="1" max="@Model.Seats.Count(s => s.IsAvailable)" required />
				</div>

				<div class="seat-map gap-3 justify-content-center flex-1 w-100 h-100">
					<div class="seat-grid flex-1 h-100 w-100">
						@for (int floor = 1; floor <= Model.TotalFloors; floor++)
						{
							<div class="d-flex flex-column-reverse flex-sm-column-reverse flex-md-row">
								<div class="w-75 my-3">
									<h5>Floor @floor</h5>
									@for (int row = 1; row <= Model.RowsPerFloor[floor - 1]; row++)
									{
										<div class="seat-row">
											@for (int col = 1; col <= Model.TotalColumns; col++)
											{
												var key = new { Floor = floor, Row = row, Column = col };
												if (seatLookup.TryGetValue(key, out Seat seat))
												{
													<div class="seat @(seat.IsAvailable ? "available" : "booked")"
														data-seat-id="@seat.Id" data-seat-number="@seat.Number">
														@seat.Number
													</div>
												}
												else
												{
													<div class="seat empty"></div>
												}
											}
										</div>
									}
								</div>
								<div class="seat-legend-box">
									<span class="seat-legend booked">Booked</span>
									<span class="seat-legend available">Available</span>
									<span class="seat-legend selected">Selected</span>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Trip Information Section -->
	<div class="col-lg-5">
		<div class="card">
			<div class="card-header bg-secondary-subtle bg-gradient">
				<h5 class="card-title">Trip Information</h5>
			</div>
			<div class="card-body trip-information" id="TripInfo">
				<p><strong>Starting Point:</strong> @Model.DepartureLocation <span
						class="small text-muted">(@Model.DepartureLocationAddress)</span></p>
				<p><strong>Ending Point:</strong> @Model.DestinationLocation <span
						class="small text-muted">(@Model.DestinationLocationAddress)</span></p>
				<p><strong>Departure Time:</strong> @Model.DepartureTime.ToString("HH:mm dd/MM/yyyy")</p>
				<p><strong>License Plate:</strong> @Model.LicensePlate</p>
				<p><strong>Total Seats:</strong> <span id="selectedSeatCount">0</span></p>
				<h5><strong>Seat Number:</strong> <span id="selectedSeats"></span></h5>
			</div>
		</div>

		<br>

		<div class="card">
			<div class="card-header bg-secondary-subtle bg-gradient">
				<h5 class="card-title">User Information</h5>
			</div>
			<div class="card-body user-information" id="CustomerInfo">
				@if (@Model.User != null && User.Identity.IsAuthenticated)
				{
					<p><strong>Full Name: </strong> @Model.User.FullName</p>
					<p><strong>Address: </strong> @Model.User.Address</p>
					<p><strong>Email: </strong> @Model.User.Email</p>
					<p><strong>Phone Number: </strong> @Model.User.PhoneNumber</p>
				}
				else
				{
					<div class="form-group mb-3">
						<label for="guestName">Full Name</label>
						<input type="text" id="guestName" name="guestName" class="form-control" required />
					</div>
					<div class="form-group mb-3">
						<label for="guestEmail">Email</label>
						<input type="email" id="guestEmail" name="guestEmail" class="form-control" required />
					</div>
					<div class="form-group">
						<label for="guestPhone">Phone Number</label>
						<input type="tel" id="guestPhone" name="guestPhone" class="form-control" required />
					</div>
				}
			</div>
		</div>

		<br>

		<div class="card">
			<div class="card-header bg-secondary-subtle bg-gradient">
				<h5 class="card-title">Coupon</h5>
			</div>
			<div class="card-body">
				<input type="hidden" id="tripId" name="tripId" value="@Model.TripId" />
				<div class="input-group mb-2">
					<input type="hidden" id="couponId" name="couponId" value="">
					<input type="text" id="couponCode" class="form-control" placeholder="Enter Coupon Code" />
					<button type="button" class="btn btn-outline-primary" id="applyCouponBtn">Apply</button>
				</div>
				<div id="couponFeedback" class="mt-2"></div>
				<div class="total-price mt-3"><strong>Total:</strong> <span id="totalPriceText">0đ</span></div>
				<input type="hidden" id="totalPrice" name="totalPrice" value="0" />
			</div>
		</div>

		<br>

		<div class="card">
			<div class="card-header bg-secondary-subtle bg-gradient"><span class="card-title">Payment</span></div>
			<div class="card-body">
				<select name="paymentMethod" id="payment-method" class="form-select" style="cursor: pointer;">
					<option value="" selected disabled>Select a payment method</option>
					<option value="Cash" data-icon="fa-solid fa-money-bill">On Cash</option>
					<option value="VnPay" data-icon="fa-brands fa-cc-visa">VNPay</option>
					<option value="Visa" data-icon="fa-brands fa-cc-momo">Momo</option>
				</select>
			</div>

			<div class="card-footer">
				<button type="button" class="btn btn-primary w-100 mt-2" id="purchaseBtn" disabled>
					<i class="fas fa-ticket-alt me-2"></i>Purchase
				</button>
			</div>
		</div>
	</div>
</form>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		$(document).ready(function () {
			// Constants and variables
			const maxSeats = @Model.Seats.Count(s => s.IsAvailable);
			const pricePerSeat = @Model.Price;
			let selectedSeats = [];
			let discountedAmount = 0;
			let couponApplied = false;
			let couponId = null;

			// DOM elements
			const $purchaseBtn = $('#purchaseBtn');
			const $seatForm = $('#seatForm');
			const $modal = $('#confirmationModal');
			const $confirmBtn = $('#confirm-booking-btn');
			const $modalSeatCount = $('#modal-seat-count');
			const $modalSeatNumbers = $('#modal-seat-numbers');
			const $modalTotalPrice = $('#modal-total-price');

			// Initialize Bootstrap modal
			const confirmationModal = new bootstrap.Modal($modal[0]);

			// Update seat selection information
			function updateSeatSelection() {
				$('#selectedSeatIds').val(selectedSeats.map(s => s.id).join(','));
				$('#selectedSeatCount').text(selectedSeats.length);
				$('#selectedSeats').text(selectedSeats.length ? selectedSeats.map(s => s.number).join(', ') : 'None');

				updateTotalPrice();
				updatePurchaseButtonState();
			}

			// Calculate and update total price
			function updateTotalPrice() {
				const total = selectedSeats.length * pricePerSeat;
				const finalTotal = Math.max(0, total - discountedAmount);

				$('#totalPriceText').text(finalTotal.toLocaleString('vi-VN') + 'đ');
				$('#totalPrice').val(finalTotal);
				$modalTotalPrice.text(finalTotal.toLocaleString('vi-VN') + 'đ');
			}

			// Enable/disable purchase button based on form validity
			function updatePurchaseButtonState() {
				const numTickets = parseInt($('#numberOfTickets').val());
				const paymentSelected = $('#payment-method').val() !== "";
				const seatsValid = selectedSeats.length === numTickets;

				let guestInfoValid = true;
				if (!@(Model.User != null && User.Identity.IsAuthenticated ? "true" : "false")) {
					guestInfoValid = $('#guestName').val().trim() !== "" &&
						$('#guestEmail').val().trim() !== "" &&
						$('#guestPhone').val().trim() !== "";
				}

				$purchaseBtn.prop('disabled', !(seatsValid && paymentSelected && guestInfoValid));
			}

			// Event: Seat selection
			$('.seat-map').on('click', '.seat.available', function () {
				const seatId = $(this).data('seat-id');
				const seatNumber = $(this).data('seat-number');
				const numTickets = parseInt($('#numberOfTickets').val());
				const $seat = $(this);

				// Toggle selection
				if ($seat.hasClass('selected')) {
					$seat.removeClass('selected');
					selectedSeats = selectedSeats.filter(s => s.id !== seatId);
				} else if (selectedSeats.length < numTickets) {
					$seat.addClass('selected');
					selectedSeats.push({ id: seatId, number: seatNumber });
				} else {
					alert(`You can only select ${numTickets} seat(s).`);
					return;
				}

				updateSeatSelection();
			});

			// Event: Number of tickets changed
			$('#numberOfTickets').on('input', function () {
				let numTickets = parseInt($(this).val());

				// Validate input
				if (numTickets > maxSeats) {
					numTickets = maxSeats;
					$(this).val(maxSeats);
					alert(`Maximum available seats: ${maxSeats}`);
				}

				// Adjust selections if needed
				if (numTickets < selectedSeats.length) {
					selectedSeats = selectedSeats.slice(0, numTickets);
					$('.seat.selected').slice(numTickets).removeClass('selected');
				}

				updateSeatSelection();
			});

			// Event: Apply coupon
			$('#applyCouponBtn').click(function () {
				const couponCode = $('#couponCode').val().trim();
				const tripId = $('#tripId').val();

				if (!couponCode) {
					showCouponFeedback('Please enter a coupon code', 'danger');
					return;
				}

				if (couponApplied) {
					showCouponFeedback('Coupon already applied', 'warning');
					return;
				}

				$.ajax({
					url: '@Url.Action("ApplyCoupon", "Coupons")',
					type: "POST",
					data: { couponCode, tripId },
					success: function (response) {
						if (response.success) {
							discountedAmount = response.discountedAmount;
							couponId = response.couponId;
							couponApplied = true;

							$('#couponId').val(couponId);
							showCouponFeedback(response.message, 'success');
							updateTotalPrice();

							// Disable coupon inputs
							$('#applyCouponBtn').prop('disabled', true);
							$('#couponCode').prop('readonly', true);
						} else {
							showCouponFeedback(response.message, 'danger');
						}
					},
					error: function () {
						showCouponFeedback('Error applying coupon', 'danger');
					}
				});
			});

			// Event: Purchase button clicked
			$purchaseBtn.click(function () {
				// Update modal content
				$modalSeatCount.text(selectedSeats.length);
				$modalSeatNumbers.text(selectedSeats.map(s => s.number).join(', '));

				// Show modal
				confirmationModal.show();
			});

			// Event: Confirm booking
			$confirmBtn.click(function () {
				confirmationModal.hide();
				$seatForm.submit();
			});

			// Event: Form inputs changed
			$('#payment-method, #guestName, #guestEmail, #guestPhone').on('change input', updatePurchaseButtonState);

			// Helper: Show coupon feedback
			function showCouponFeedback(message, type) {
				$('#couponFeedback').html(`
		                    <div class="alert alert-${type} alert-dismissible fade show">
		                        ${message}
		                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
		                    </div>
		                `);
			}

			// Redirect countdown
			const countdownElement = document.getElementById('countdown');
			if (countdownElement) {
				let countdown = 5;
				const timer = setInterval(() => {
					countdownElement.textContent = --countdown;
					if (countdown <= 0) {
						clearInterval(timer);
						window.location.href = '@Url.Action("Details", "Tickets", new { Id = TempData["TicketIds"] })';
					}
				}, 1000);
			}
		});
	</script>
	<style>
		/* Seat styling */
		.seat-map {
			display: flex;
			flex-direction: column;
			gap: 1rem;
			flex: 1;
			padding: 1rem;
		}

		.seat-row {
			display: grid;
			grid-template-columns: repeat(
					@Model.TotalColumns
					, 1fr);
			gap: 0.5rem;
			margin-bottom: 0.5rem;
		}

		.seat {
			aspect-ratio: 1;
			display: flex;
			align-items: center;
			justify-content: center;
			border-radius: 4px;
			font-weight: 500;
			cursor: pointer;
			transition: all 0.2s ease;
			border: 1px solid transparent;
			max-width: 100px;
			max-height: 100px;
			width: 100%;
			line-height: 1;
			font-size: 14px;
			margin: 0;
			padding: 0;
		}

		.seat:hover:not(.booked):not(.selected) {
			transform: scale(1.05);
			box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
		}

		.seat.available {
			background-color: #b3e5fc;
			color: black;
			border-color: #bee5eb;
		}

		.seat.booked {
			background-color: #bdbdbd;
			color: white;
			cursor: not-allowed;
		}

		.seat.selected {
			background-color: #ff9800;
			color: white;
			border-color: #ffdf7e;
		}

		.seat.empty {
			background-color: transparent;
			border: none;
			pointer-events: none;
		}

		/* Floor container */
		.floor-container {
			display: flex;
			flex-direction: column;
			gap: 1rem;
			margin-bottom: 2rem;
		}

		.floor-title {
			font-size: 1.2rem;
			font-weight: bold;
			margin-bottom: 0.5rem;
			color: #333;
		}

		/* Legend styling */
		.seat-legend-box {
			display: flex;
			flex-direction: column;
			align-items: end;
			justify-content: center;
			gap: 0.5rem;
			max-width: 150px;
			flex: 1;
			margin-left: 1rem;
		}

		.seat-legend {
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 14px;
			font-weight: 500;
			width: 100%;
			max-width: 100px;
			text-align: center;
		}

		.seat-legend.booked {
			background-color: #bdbdbd;
		}

		.seat-legend.available {
			background-color: #b3e5fc;
		}

		.seat-legend.selected {
			background-color: #ff9800;
		}

		/* Card styling */
		.card {
			border: 1px solid #ddd;
			border-radius: 8px;
		}

		.card-title {
			font-size: 1.25rem;
			font-weight: bold;
		}

		.card-body p {
			margin-bottom: 0.5rem;
		}

		.total-price * {
			font-size: 25px !important;
		}
	</style>
}